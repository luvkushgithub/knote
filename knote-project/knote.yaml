apiVersion: v1
kind: Service
metadata:
  name: knote
spec:
  selector:
    app: knote
  ports:
    - port: 80
      targetPort: 3000
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knote
spec:
  replicas: 1
  selector:
    matchLabels:
      app: knote
  template:
    metadata:
      labels:
        app: knote
    spec:
      containers:
        - name: knote
          image: learnk8s/knote-js:1.0.0
#          command: ["/bin/sh", "-c", "sleep 10000 && env"]
          envFrom:
          - secretRef:
              name: app-pod-secret
          ports:
            - containerPort: 3000
          env:
            - name: MONGO_URL
              value: mongodb://mongo:27017/dev
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args:
          - "-c"
          - |
      # Install necessary tools (e.g., jq for JSON parsing)
            apk add --no-cache jq
      
      # Define the name of the secret
            SECRET_NAME="app-pod-secret"

      # Initial check
            SECRET_HASH=$(kubectl get secret $SECRET_NAME -o json | jq -r '.data | to_entries | map(.key) | join(",")' | md5sum | awk '{ print $1 }')

            while true; do
        # Check for updates
              NEW_SECRET_HASH=$(kubectl get secret $SECRET_NAME -o json | jq -r '.data | to_entries | map(.key) | join(",")' | md5sum | awk '{ print $1 }')
        
              if [ "$SECRET_HASH" != "$NEW_SECRET_HASH" ]; then
                echo "Secret $SECRET_NAME has been updated!"
          # Run your command here, e.g., trigger a reload or notify
          # For demonstration, we just print a message
                kubectl get pods
        
          # Update the hash to the new value
                SECRET_HASH=$NEW_SECRET_HASH
              fi
        
        # Sleep for a while before checking again
              sleep 30
            done
    # This sidecar runs a script that checks for updates to a secret and runs a command when changes are detected.
  
        restartPolicy: Always
